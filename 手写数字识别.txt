# 卷积神经网络识别手写数字
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

# 加载数据
mnist = input_data.read_data_sets('MNIST_data/', one_hot=True)
sess = tf.InteractiveSession()


# 权重初始化
def weight_variable(shape):
    initial = tf.truncated_normal(shape, stddev=0.1)
    return tf.Variable(initial)
def bias_variable(shape):
    initial = tf.constant(0.1, shape=shape)
    return tf.Variable(initial)

# 卷积和池化
def conv2d(x,W):
    return tf.nn.conv2d(x,W,strides=[1,1,1,1],padding='SAME')
def max_pool_2x2(x):
    return tf.nn.max_pool(x,ksize=[1,2,2,1],strides=[1,2,2,1],padding='SAME')
	
# 第一层卷积 图片大小为28*28=784 识别数字为0-9 共10个
x = tf.placeholder(tf.float32, [None, 784])
y_ = tf.placeholder(tf.float32, [None, 10])

x_image = tf.reshape(x, [-1, 28, 28, 1]) # -1表示第一维（即 样本数量）的大小未知 第二 三维是图片的宽高 第四维是颜色通道数 此次图片集只计算灰色通道

W_conv1 = weight_variable([5, 5, 1, 32]) #filter为5*5 1为输入通道 共32个卷积核即输出通道为32
b_conv1 = bias_variable([32])

#上面几行都是在确定输入x输出y和第一层卷积参数w,b的形状  下面两行是具体的计算
h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1) #先调用conv2d函数做x*w+b 再将结果传入relu计算
h_pool1 = max_pool_2x2(h_conv1) #最大池化操作 根据前面max_pool_2x2的定义 图片大小将减半

# 第二层卷积 前两行确定第二层卷积的参数 后两行是计算过程
W_conv2 = weight_variable([5, 5, 32, 64])
b_conv2 = bias_variable([64])

h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)
h_pool2 = max_pool_2x2(h_conv2)

# 密集连接层  经过两层卷积 特征图大小已经是7*7*64 即共有7*7*64个特征 
# 把它一维化再连接一个有1024个神经元的连接层 即把它看作一个有7*7*64个输入 1024个输出的单连接层
# 然后进行线性运算后再使用relu
W_fc1 = weight_variable([7 * 7 * 64, 1024])
b_fc1 = bias_variable([1024])
h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])
h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)

# Dropout
keep_prob = tf.placeholder(tf.float32)
h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)

# 输出层 最后1024个神经元的全连接层要连接一个只有10个神经元的输出层 并用softmax来分类
W_fc2 = weight_variable([1024, 10])
b_fc2 = bias_variable([10])
y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)

# 损失函数 这里的损失函数依然使用交叉信息熵，优化器使用 Adam，并把学习速率设为较小的 1e-4。
cross_entropy = -tf.reduce_sum(y_ * tf.log(y_conv))
train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)

# 定义准确率
correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

# 训练
tf.global_variables_initializer().run()
for i in range(5000): # 20000次训练需要耗时30min，为了节省时间这次运行改为5000次
    batch = mnist.train.next_batch(50)
    if i % 500 == 0:
        train_accuracy = accuracy.eval({x: batch[0], y_: batch[1], keep_prob: 1.0})
        print ('step {},training accuracy {}'.format(i, train_accuracy))
    train_step.run({x: batch[0], y_: batch[1], keep_prob: 0.5})
# 测试准确率
test_accuracy = accuracy.eval({x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0})
print ('test accuracy:', test_accuracy)